//@see org.springframework.context.annotation.AnnotationConfigUtils
org.springframework.context.annotation.internalConfigurationAnnotationProcessor=org.springframework.context.annotation.ConfigurationClassPostProcessor
org.springframework.context.annotation.internalAutowiredAnnotationProcessor=org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor
org.springframework.context.annotation.internalCommonAnnotationProcessor=org.springframework.context.annotation.CommonAnnotationBeanPostProcessor
org.springframework.context.event.internalEventListenerProcessor=org.springframework.context.event.EventListenerMethodProcessor
org.springframework.context.event.internalEventListenerFactory=org.springframework.context.event.DefaultEventListenerFactory

org.springframework.aop.config.internalAutoProxyCreator

/**
 * @see javax.inject.Provider
 */
DefaultListableBeanFactory => beanDefinitionMap
    AbstractAutowireCapableBeanFactory => allowCircularReferences
        AbstractBeanFactory
            FactoryBeanRegistrySupport
                DefaultSingletonBeanRegistry
                    impl SingletonBeanRegistry
            impl ConfigurableBeanFactory
                extends HierarchicalBeanFactory
                extends SingletonBeanRegistry
        impl AutowireCapableBeanFactory
            extends BeanFactory
    impl ConfigurableListableBeanFactory
        extends ListableBeanFactory
            extends BeanFactory
        extends AutowireCapableBeanFactory
            extends BeanFactory
        extends ConfigurableBeanFactory
            extends HierarchicalBeanFactory,
            extends SingletonBeanRegistry
    impl BeanDefinitionRegistry
        extends AliasRegistry

-- Main方法的ApplicationContext
AnnotationConfigApplicationContext => AnnotatedBeanDefinitionReader reader
                                   => ClassPathBeanDefinitionScanner scanner
    GenericApplicationContext => DefaultListableBeanFactory
        AbstractApplicationContext => ApplicationContext parent，
                                   => earlyApplicationEvents，
                                   => earlyApplicationListeners
                                   => applicationEventMulticaster
                                   => MessageSource
                                   => LifecycleProcessor
                                   => ResourcePatternResolver
                                   => beanFactoryPostProcessors
                                   => ConfigurableEnvironment
            DefaultResourceLoader
            impl ConfigurableApplicationContext
                extends ApplicationContext
                    extends EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory,
                            		MessageSource, ApplicationEventPublisher, ResourcePatternResolver
                extends Lifecycle
        impl BeanDefinitionRegistry
    impl AnnotationConfigRegistry => register(Class<?>... componentClasses),scan(String... basePackages)



-- SpringBoot的ApplicationContext
AnnotationConfigServletWebServerApplicationContext
    ServletWebServerApplicationContext
        GenericWebApplicationContext => servletContext
            GenericApplicationContext => DefaultListableBeanFactory
                AbstractApplicationContext => ApplicationContext parent，
                                           => earlyApplicationEvents，
                                           => earlyApplicationListeners
                                           => applicationEventMulticaster
                                           => MessageSource
                                           => LifecycleProcessor
                                           => ResourcePatternResolver
                                           => beanFactoryPostProcessors
                                           => ConfigurableEnvironment
                    DefaultResourceLoader
                    impl ConfigurableApplicationContext
                        extends ApplicationContext
                impl BeanDefinitionRegistry


/**
 * 用于处理以下注解：Autowired，Value，Inject
 */
AutowiredAnnotationBeanPostProcessor
    InstantiationAwareBeanPostProcessorAdapter
        impl SmartInstantiationAwareBeanPostProcessor
            extends InstantiationAwareBeanPostProcessor
                extends BeanPostProcessor
    impl MergedBeanDefinitionPostProcessor
        extends BeanPostProcessor
    impl BeanFactoryAware
    impl PriorityOrdered

/**
 * 支持以下注解：PostConstruct，PreDestroy，Resource
 */
CommonAnnotationBeanPostProcessor
    /**
     * 支持以下注解：InitializingBean，DisposableBean
     */
    InitDestroyAnnotationBeanPostProcessor
        impl MergedBeanDefinitionPostProcessor
        impl DestructionAwareBeanPostProcessor
    impl InstantiationAwareBeanPostProcessor


/**
 * AOP
 */
AnnotationAwareAspectJAutoProxyCreator
    AspectJAwareAdvisorAutoProxyCreator
        AbstractAdvisorAutoProxyCreator
            AbstractAutoProxyCreator => beanFactory,earlyProxyReferences
                ProxyProcessorSupport
                    ProxyConfig
            impl SmartInstantiationAwareBeanPostProcessor


-- Spring生命周期
// Prepare this context for refreshing.
prepareRefresh();

// Tell the subclass to refresh the internal bean factory.
ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

// Prepare the bean factory for use in this context.
prepareBeanFactory(beanFactory);

try {
    // Allows post-processing of the bean factory in context subclasses.
    postProcessBeanFactory(beanFactory);

    // Invoke factory processors registered as beans in the context.
    /**
     * 这一步会解析@Configuration和ComponentScan，完成后，所有的BeanDefinition到可以拿到了，
     */
    invokeBeanFactoryPostProcessors(beanFactory);

    // Register bean processors that intercept bean creation.
    /**
     * 注册所有的Bean后置处理器
     */
    registerBeanPostProcessors(beanFactory);

    // Initialize message source for this context.
    initMessageSource();

    // Initialize event multicaster for this context.
    initApplicationEventMulticaster();

    // Initialize other special beans in specific context subclasses.
    onRefresh();

    // Check for listener beans and register them.
    registerListeners();

    // Instantiate all remaining (non-lazy-init) singletons.
    finishBeanFactoryInitialization(beanFactory);

    // Last step: publish corresponding event.
    finishRefresh();
}

catch (BeansException ex) {
    if (logger.isWarnEnabled()) {
        logger.warn("Exception encountered during context initialization - " +
                "cancelling refresh attempt: " + ex);
    }

    // Destroy already created singletons to avoid dangling resources.
    destroyBeans();

    // Reset 'active' flag.
    cancelRefresh(ex);

    // Propagate exception to caller.
    throw ex;
}

finally {
    // Reset common introspection caches in Spring's core, since we
    // might not ever need metadata for singleton beans anymore...
    resetCommonCaches();
}



